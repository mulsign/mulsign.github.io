<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mulsign.github.io</id>
    <title>Multiply Bombe</title>
    <updated>2019-10-04T06:06:10.664Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://mulsign.github.io"/>
    <link rel="self" href="https://mulsign.github.io/atom.xml"/>
    <subtitle>No step, no mile.</subtitle>
    <logo>https://mulsign.github.io/images/avatar.png</logo>
    <icon>https://mulsign.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, Multiply Bombe</rights>
    <entry>
        <title type="html"><![CDATA[Directed Greybox Fuzzing]]></title>
        <id>https://mulsign.github.io/post/directed-greybox-fuzzing</id>
        <link href="https://mulsign.github.io/post/directed-greybox-fuzzing">
        </link>
        <updated>2019-09-29T04:57:01.000Z</updated>
        <content type="html"><![CDATA[<p>论文地址 <a href="http://mboehme.github.io/paper/CCS17.pdf">Directed Greybox Fuzzing</a><br>
github <a href="https://github.com/aflgo/aflgo">AFLGO</a></p>
<h1 id="摘要">摘要</h1>
<p>现有Greybox Fuzzing（GF）不能有效引导/定向，例如，对存在问题的更改或补丁，对关键的系统调用或危险的地点，或朝着我们希望重现报告的漏洞的堆栈跟踪功能。<br>
在本文中，我们引入了定向灰盒模糊测试(DGF)，它生成能够有效地到达给定的一组目标程序位置的输入。我们开发并评估了一种基于模拟退火的能量调度算法，该调度算法逐渐将更多的能量分配给离目标位置较近的种子，同时减少距离较远的种子的能量。使用我们的实现<strong>AFLGo</strong>进行的实验表明，DGF的性能优于基于有向符号执行的白盒模糊和无向灰盒模糊。介绍了DGF在补丁测试和崩溃再现方面的应用，并讨论了AFLGo与谷歌连续模糊平台oss-fuzz的集成。由于它的方向性，AFLGo可以在几个经过高度模糊测试、高度安全的项目(如LibXML2)中发现39个bug。分配了17个CVE编号。</p>
<h2 id="keywords">keywords</h2>
<p>patch testing; crash reproduction; reachability; directed testing;coverage-based greybox fuzzing; verifying true positives</p>
<h1 id="介绍">介绍</h1>
<p>灰盒模糊(GF)被认为是最先进的漏洞检测技术。GF使用轻量级工具来确定输入执行的路径的惟一标识符，而性能开销可以忽略不计。通过修改提供的种子输入生成新的输入，如果它们执行一个新的、有趣的路径，则将该种子添加到fuzzer队列中。<br>
定向模糊测试可以用来</p>
<ol>
<li>patch testing 通过将更改的语句设置为目标进行补丁测试；</li>
<li>crash reproduction 通过将堆栈跟踪中的方法调用设置为目标来重现崩溃；</li>
<li>static analysis report verification 通过设置静态分析工具报告的潜在危险为目标的静态分​​析报告验证；</li>
<li>information flow detection 通过设置敏感源和汇聚为目标进行信息流检测。</li>
</ol>
<p>有向符号执行(DSE)将可达性问题转换为迭代约束满足问题。由于大多数路径实际上是不可达的，因此搜索通常通过寻找到中间目标的可行路径迭代进行。例如，补丁测试工具Katch使用符号执行引擎Klee来获得一个更改后的语句。与greybox模糊器不同，基于符号执行的whitebox模糊器提供了一个简单的句柄来实现定向模糊。<br>
然而，DSE的有效性是以效率为代价的。DSE在重载程序分析和约束求解上花费了大量的时间。在每次迭代中，DSE都使用程序分析来确定那些需要被否定的分支，以便更接近目标，并根据沿着这些路径的指令序列构造相应的路径条件，然后使用约束求解器检查这些条件的可满足性。在一个DSE产生单个输入的同时，一DGF模糊器可以执行多几个数量级的输入。这为我们提供了开发重量轻，定向灰盒模糊器的机会。实验表明，开始使用相同的种子，定向时，在图1中我们提交针对greybox模糊器AFLGo需要不到20分钟暴露心脏出血漏洞，而DSE工具Katch甚至不能在24小时内露出心脏出血漏洞。</p>
<p>在本文中，我们介绍了定向灰盒模糊(DGF)，它的重点是达到一个程序中给定的一组目标位置。在较高的层次上，我们将可达性转化为一个优化问题，并采用一种特定的元启发式算法来最小化生成的种子到目标的距离。为了计算种子距离，我们首先计算并测量每个基本块到目标的距离。虽然种子距离是过程间的（<em>inter-procedural</em>），但是我们的新度量只需要对调用图和每个过程内（<em>intra-procedural</em>）CFG进行一次分析。在运行时，fuzzer将每个已执行的基本块的距离值聚合起来，计算种子距离作为它们的平均值。DGF使用的最小化种子距离的元启发式算法称为模拟退火算法，并将其实现为能量调度。能量调度控制着所有种子的能量。种子的能量指定了花在模糊种子上的时间。与所有greybox模糊化技术一样，通过将分析移到编译时，我们最小化了运行时的开销。</p>
<p>DGF casts the reachability of target locations as optimizationproblem while existing directed (whitebox) fuzzing approachescast reachability as iterative constraint satisfaction problem.<br>
<strong>DGF将目标位置的可达性转换为优化问题，而现有的有向模糊方法将可达性转换为迭代约束满足问题。</strong></p>
<p>Directed greybox fuzzing is effectively directed and efficientlycomplements symbolic execution-based directed fuzzing.<br>
<strong>定向灰盒模糊是有效的有向模糊，有效地补充了基于符号执行的定向模糊。</strong></p>
<p>AFLGo is an useful patch testing tool that effectively exposes vulnerabilities that were recently introduced and incomplete fixes of previously reported vulnerabilities.<br>
<strong>AFLGo是一个有用的补丁测试工具，它可以有效地暴露最近引入的漏洞和以前报告的漏洞的未完成修复。</strong></p>
<h2 id="主要贡献">主要贡献</h2>
<ol>
<li>灰盒模糊与模拟退火的集成</li>
<li>一种形式化的度量距离的方法是过程间的，同时考虑多个目标，可以在检测时有效地预先计算，并在运行时有效地导出</li>
<li>实现定向灰盒模糊工具AFLGo，这是在<a href="https://github.com/aflgo/aflgo">Github</a>上公开可用</li>
<li>AFLGo整合补丁测试工具为OSS-fuzz的完全自动化的工具链，可公开获得的<a href="https://github.com/aflgo/oss-fuzz">oss-fuzz</a></li>
<li>大规模评估定向灰盒模糊作为补丁测试和崩溃再现工具的有效性和实用性</li>
</ol>
<h1 id="目录">目录</h1>
<ol start="2">
<li>以“心脏出血”为例，说明了定向灰盒模糊的相关特征；</li>
<li>讨论了距离的形式化度量和灰盒模糊与模拟退火的集成；</li>
<li>给出了具体的实现和实验设计；</li>
<li>我们将AFLGo应用于补丁测试，并将其与最先进的技术KATCH进行比较;</li>
<li>我们讨论将AFLGo集成到oss-fuzz中，并将其用于最近的更改;</li>
<li>我们将AFLGo应用于崩溃复现，并将其与baseline无定向灰盒模糊(AFL)和最先进的(BugRedux[18])进行比较；</li>
<li>引出对有效性的威胁；</li>
<li>相关研究；</li>
<li>结论。</li>
</ol>
<h1 id="引例">引例</h1>
<p>我们以心脏出血漏洞为例，讨论了两种不同的定向模糊方法。传统上，直接模糊是基于符号执行的。在这里，我们将基于符号执行引擎Klee的补丁测试工具Katch与我们在本文中介绍的定向灰盒模糊实现AFLGo进行了比较。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://mulsign.github.io/post/hello-gridea</id>
        <link href="https://mulsign.github.io/post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>